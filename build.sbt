name := "fastpath-demo"
version := "2.0.0"
scalaVersion := "2.12.5"

libraryDependencies ++= Seq(
  "com.sksamuel.scapegoat" %% "scalac-scapegoat-plugin" % "1.3.4",
  "io.github.lukehutch" % "fast-classpath-scanner" % "2.18.1"
)

//source generator task
sourceGenerators in Compile += Def.task {
  import com.sksamuel.scapegoat.Inspection
  import io.github.lukehutch.fastclasspathscanner.FastClasspathScanner
  import scala.collection.JavaConverters._

  val inspectionClass = classOf[Inspection]
  val fastCPScanner = new FastClasspathScanner(inspectionClass.getPackage.getName)
  val scanResult = fastCPScanner.scan()
  val inspectionClassesNames = scanResult.getNamesOfSubclassesOf(inspectionClass)
  val inspectionClasses = scanResult.classNamesToClassRefs(inspectionClassesNames).asScala

  val AllScapegoatInspections = for {
    (inspectionClass, idx) <- inspectionClasses.zipWithIndex
    inspection = inspectionClass.newInstance()
  } yield s"""ScapegoatInspection(id = ${idx}, name = ${inspection.text}, description = ${inspection.explanation.getOrElse("No Explanation")}, defaultLevel = ${inspection.defaultLevel}),"""

  val lines = List("package demo.autogenerated", "final case class ScapegoatInspection (id: Int, name: String, description: String, defaultLevel: String)") ++ AllScapegoatInspections + ")"

  val scapegoatInspectionsFile = (sourceManaged in Compile).value / "scapegoat" / "inspections.scala"
  IO.writeLines(scapegoatInspectionsFile, lines)
  Seq(scapegoatInspectionsFile)
}.taskValue
